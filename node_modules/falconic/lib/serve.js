'use strict';

const path = require('path');
const pug = require('pug');
const routing = require('../router');

const STATIC_PATH = path.join(process.cwd(), './src/views');

const types = {
  object: (data, callback) => callback(JSON.stringify(data[0], null, '\t')),
  undefined: (args, callback) => callback('not found'),
  function: (fn, callback) => {
    if (fn[0].length === 3) fn[0](fn[1], fn[2], callback);
    else if (fn[0].length === 4) fn[0](fn[1], fn[2], fn[3], callback);
    else callback(JSON.stringify(fn[0](fn[1], fn[2]), null, '\t'));
  },
};

const matching = [];
for (const key in routing) {
  if (key.includes('*')) {
    const rx = new RegExp(key.replace('*', '(.*)'));
    const route = routing[key];
    matching.push([rx, route]);
    delete routing[key];
  }
}


const serve = (data, req, res) => {
  let par;
  let route = data; //routing[req.url];
  if (!route) {
    for (let i = 0; i < matching.length; i++) {
      const rx = matching[i];
      par = req.url.match(rx[0]);
      if (par) {
        par.shift();
        data = rx[1];
        break;
      }
    }
  }

  res.redirect = (url, res)=> {
    res.writeHead(301, {
      Location: url
    });
    res.end();
  }

  res.render = (path, data)=> {
    const file = STATIC_PATH + path + '.pug';
    return pug.renderFile(file, data);
    //res.end(pug.renderFile(file, data));
  }

  const type = typeof data;
  if (type === 'string') return res.end(data);
  const serializer = types[type];
  serializer([data, req, res, par], data => serve(data, req, res));
};

module.exports = serve;