'use strict';

const fs = require('fs');
const path = require('path');

const STATIC_PATH = path.join(process.cwd(), './src/public');

const MIME_TYPES = {
  default: 'application/octet-stream',
  html: 'text/html; charset=UTF-8',
  js: 'application/javascript; charset=UTF-8',
  json: 'application/json',
  css: 'text/css',
  png: 'image/png',
  jpg: 'image/jpg',
  gif: 'image/gif',
  ico: 'image/x-icon',
  svg: 'image/svg+xml',
};

const cache = new Map();

const cacheFile = (filePath) => {
	const key = filePath.substring(STATIC_PATH.length);
	fs.readFile(filePath, 'utf8', (err, data)=>{
		if(err) throw err;
		cache.set(key, data);		
	});
}

const cacheDirectory = (directoryPath) => {
	let files = fs.readdirSync(path.join(directoryPath));
	files.forEach(file => {
		file = path.join(directoryPath, file).replace(/\\/g, '/');
		if(fs.statSync(file).isDirectory()) cacheDirectory(file);
		else cacheFile(file);
	});
}

cacheDirectory(STATIC_PATH);

const statics = (data, req, res)=> {
	const ext = path.extname(req.url).substring(1).toLowerCase();
	const mimeType = MIME_TYPES[ext] || MIME_TYPES.html;
	data = cache.get(req.url);
	const statusCode = data ? 200 : 404;
	res.writeHead(statusCode, { 'Content-Type': mimeType });
	res.end(data);
	//console.log(`${req.method} ${req.url} ${statusCode}`);	
}

module.exports = statics;