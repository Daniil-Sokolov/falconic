'use strict';

const fs = require('fs');
const path = require('path');
const cp = require('child_process');

const STATIC_PATH = path.join(process.cwd(), './src/routes');

/*
const cache = new Map();

const cacheFile = (filePath) => {
  const key = filePath.substring(STATIC_PATH.length);
  cache.set(key, key);
}

const cacheDirectory = (directoryPath) => {
  let files = fs.readdirSync(path.join(directoryPath));
  files.forEach(file => {
    const filePath = path.join(directoryPath, file);
    if(fs.statSync(filePath).isDirectory()) {
      cacheFile(filePath);
      cacheDirectory(filePath);
    }
    else cacheFile(filePath);
  });
}


const watch = (fork, i)=> {
  let currentChild = cp.fork(fork, i)
  cacheDirectory(STATIC_PATH);
  cache.forEach((v, k)=> {
    const fullPath = path.join(STATIC_PATH, v);
    fs.watch(fullPath, (e, f)=> {
      if (currentChild) {
        currentChild.kill()
        console.log(e, f, 'kill', fork, i);
      }
      currentChild = cp.fork(fork, i)
    })
  })
}
*/


const watch = (fork, i)=> {
	let currentChild = cp.fork(fork, i)
    fs.watch(STATIC_PATH, (e, f)=> {// {recursive: true}, (e, f)=> {
      if (currentChild) {
        currentChild.kill()
        console.log(e, f, 'kill', fork, i);
      }
      currentChild = cp.fork(fork, i)
    })	
}


module.exports = watch;